---
const { bibUrl, class: className = '' } = Astro.props as { bibUrl?: string; class?: string };
const base = (import.meta.env.BASE_URL ?? "/").replace(/\/$/, "");
const resolvedUrl = bibUrl && bibUrl.startsWith('/') ? `${base}${bibUrl}` : bibUrl;
---
<span class={`cite-this ${className}`}>
  <button type="button" class="btn" data-bib-url={String(resolvedUrl)}>Copy BibTeX</button>
  {resolvedUrl && <a download href={String(resolvedUrl)}>Download .bib</a>}
  <span class="copy-status" role="status" aria-live="polite" />
</span>

<script is:inline>
  const root = document.currentScript?.previousElementSibling;
  const btn = root?.querySelector('button');
  const status = root?.querySelector('.copy-status');
  btn?.addEventListener('click', async () => {
    try {
      const url = btn.getAttribute('data-bib-url');
      if (!url) throw new Error('Missing URL');
      const res = await fetch(url);
      const text = await res.text();
      await navigator.clipboard.writeText(text);
      if (status) status.textContent = 'Copied';
      setTimeout(() => status && (status.textContent = ''), 2000);
    } catch {
      if (status) status.textContent = 'Copy failed';
    }
  });
  
</script>
